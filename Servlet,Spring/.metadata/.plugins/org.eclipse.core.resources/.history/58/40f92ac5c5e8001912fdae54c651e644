package com.ust.ustspringbootfinal.controller;

import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.ust.ustspringbootfinal.dto.Task;
import com.ust.ustspringbootfinal.dto.TaskResponse;
import com.ust.ustspringbootfinal.service.TaskService;
import com.ustglobal.ustspringboot.dto.EmployeeResponse;


@RestController
@RequestMapping("/task")
@CrossOrigin(origins="*",allowedHeaders = "*",allowCredentials = "true")
public class TaskController {

	@Autowired
	@Qualifier("jpa")
	private TaskService service;
	
	@GetMapping(path="/get",produces=MediaType.APPLICATION_JSON_VALUE)
	public TaskResponse getTask(@RequestParam("task_id")int task_id) {
		Task task=service.getTask(task_id);
		TaskResponse response=new TaskResponse();
		if(task==null) {
			 response.setStatusCode(401);
			 response.setMessage("Failure");
			 response.setDescription("Task not found");
		 }else {
			 response.setStatusCode(201);
			 response.setMessage("success");
			 response.setDescription("Task found");
			 response.setTask(Arrays.asList(task));
		}
		return response;
	}//End Of getTask
	
	@GetMapping(path="/get-all",produces=MediaType.APPLICATION_JSON_VALUE)
	public TaskResponse getAllTask() {
		List<Task> task=service.getAllTask();
		TaskResponse response=new TaskResponse();
		if(task==null) {
			 response.setStatusCode(401);
			 response.setMessage("Failure");
			 response.setDescription("Task not found");
		 }else {
			 response.setStatusCode(201);
			 response.setMessage("success");
			 response.setDescription("Task found");
			 response.setTask(task);
		}
		return response;
	}//End Of getAllTask
	
	@PostMapping(path="/add",produces=MediaType.APPLICATION_JSON_VALUE,consumes=MediaType.APPLICATION_JSON_VALUE)
	public TaskResponse addTask(@RequestBody Task task) {
		TaskResponse response=new TaskResponse();
		 if(service.addTask(task)) {
			 response.setStatusCode(201);
			 response.setMessage("success");
			 response.setDescription("Task added");
		 }else {
			 response.setStatusCode(401);
			 response.setMessage("Failure");
			 response.setDescription("Task not added");
		 }
		return response;
	}//End Of addTask
	
	@PutMapping(path="/modify",produces=MediaType.APPLICATION_JSON_VALUE,consumes=MediaType.APPLICATION_JSON_VALUE)
	public TaskResponse modifyEmployee(@RequestBody Task task) {
		TaskResponse response=new TaskResponse();
		 if(service.modifyTask(task)) {
			 response.setStatusCode(201);
			 response.setMessage("success");
			 response.setDescription("Task modify successfully");
		 }else {
			 response.setStatusCode(401);
			 response.setMessage("Failure");
			 response.setDescription("Task not modify");
		 }
		return response;
	}//End Of modifyTask
	
	@DeleteMapping(path="/remove/{id}",produces=MediaType.APPLICATION_JSON_VALUE)
	public TaskResponse removeTask(@PathVariable("id")int task_id) {
		TaskResponse response=new TaskResponse();
		 if(service.removeTask(task_id)) {
			 response.setStatusCode(201);
			 response.setMessage("success");
			 response.setDescription("Task remove successfully");
		 }else {
			 response.setStatusCode(401);
			 response.setMessage("Failure");
			 response.setDescription("Task not remove");
		 }
		return response;
	}//End Of removeTask
}
